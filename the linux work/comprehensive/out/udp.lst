C51 COMPILER V9.00   UDP                                                                   07/14/2015 22:36:42 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE UDP
OBJECT MODULE PLACED IN ..\out\udp.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\net\USIP\udp.c LARGE BROWSE INCDIR(..\include\drivers;..\include\app;..\
                    -include\gui;..\net\eth;..\net\USIP) DEBUG OBJECTEXTEND PRINT(..\out\udp.lst) OBJECT(..\out\udp.obj)

line level    source

   1          #include "udp.h"
   2          UDP_BUF *RX_UDP_BUF;
   3          UDP_BUF *TX_UDP_BUF;
   4          static UDP_VIR_HEAD *VIR_HEAD;
   5          extern IP_BUF *RX_IP_BUF;  
   6          extern IP_BUF *TX_IP_BUF;
   7          extern u8 IP_INT_TYPE;
   8          extern u16 MAC_INT_TYPE;
   9          UDP_INT_MSG UDP_INT;
  10          extern u8 Local_IP[4];
  11          void UDP_Init(void)
  12          {
  13   1              UDP_INT.RECV_SIZE = 0;
  14   1              RX_UDP_BUF = (UDP_BUF *)(RX_IP_BUF->IP_DATA);
  15   1              TX_UDP_BUF = (UDP_BUF *)(TX_IP_BUF->IP_DATA);   
  16   1      }
  17          u16 Fill_UDP(u8 to_ip[4],u16 port_local,u16 port_distance,u8* usr_data,u16 data_size)
  18          {
  19   1              //填充UDP报文
  20   1              TX_UDP_BUF->LOCAL_PORT = Word_CONV(port_local);
  21   1              TX_UDP_BUF->TO_PORT = Word_CONV(port_distance);
  22   1              TX_UDP_BUF->ALL_SIZE = Word_CONV(data_size+8);
  23   1              Bytes_Copy(usr_data,(u8*)TX_UDP_BUF->UDP_DATA,data_size);
  24   1              TX_UDP_BUF->UDP_DATA[data_size] = 0x00;//填充零字节
  25   1      
  26   1              //填充伪首部
  27   1              VIR_HEAD = (UDP_VIR_HEAD*)(TX_UDP_BUF->UDP_DATA+(((data_size+1)/2)*2));
  28   1              Bytes_Copy(Local_IP,(u8*)(VIR_HEAD->LOCAL_IP),4);
  29   1              Bytes_Copy(to_ip,(u8*)(VIR_HEAD->TO_IP),4);
  30   1              VIR_HEAD->BE_ZERO = 0;
  31   1              VIR_HEAD->TCPTYPE = TCPTYPE_UDP;
  32   1              VIR_HEAD->ALL_SIZE = TX_UDP_BUF->ALL_SIZE;
  33   1      
  34   1              //计算并填充检验和
  35   1              Calculate_SUM((u16*)TX_UDP_BUF,(data_size+21)/2,3);
  36   1              return (data_size+8);   
  37   1      }
  38          u8 Check_UDP_SUM(void)
  39          {
  40   1              u16 sum_t,t;
  41   1              sum_t = RX_UDP_BUF->UDP_SUM;
  42   1              RX_UDP_BUF->UDP_SUM = 0;
  43   1              RX_UDP_BUF->UDP_DATA[Word_CONV(RX_UDP_BUF->ALL_SIZE)] = 0;
  44   1              VIR_HEAD = (UDP_VIR_HEAD*)((u8*)RX_UDP_BUF+((Word_CONV(RX_UDP_BUF->ALL_SIZE)+1)/2)*2);
  45   1      
  46   1              Bytes_Copy(RX_IP_BUF->LOCAL_IP,(u8*)(VIR_HEAD->LOCAL_IP),4);
  47   1              Bytes_Copy(RX_IP_BUF->TO_IP,(u8*)(VIR_HEAD->TO_IP),4);
  48   1              VIR_HEAD->BE_ZERO = 0;
  49   1              VIR_HEAD->TCPTYPE = TCPTYPE_UDP;
  50   1              VIR_HEAD->ALL_SIZE = RX_UDP_BUF->ALL_SIZE;
  51   1              t = Calculate_SUM((u16*)RX_UDP_BUF,(u16)(Word_CONV(RX_UDP_BUF->ALL_SIZE)+13)/2,3);
  52   1              if(t==sum_t)
  53   1              {
  54   2                      return 1;       
C51 COMPILER V9.00   UDP                                                                   07/14/2015 22:36:42 PAGE 2   

  55   2              }
  56   1              else
  57   1              {
  58   2                      return 0;
  59   2              }
  60   1      }
  61          
  62          u16 UDP_Process(void)
  63          {
  64   1              if(Check_UDP_SUM())
  65   1              {
  66   2                      UDP_INT.PORT = Word_CONV(RX_UDP_BUF->TO_PORT);
  67   2                      UDP_INT.RECV_SIZE = Word_CONV(RX_UDP_BUF->ALL_SIZE)-8;
  68   2                      UDP_INT.DST_PORT = Word_CONV(RX_UDP_BUF->LOCAL_PORT);
  69   2                      *((u32*)(&UDP_INT.DST_IP)) = *(u32*)(&RX_IP_BUF->LOCAL_IP);
  70   2                      IP_INT_TYPE = 0;
  71   2                      return UDP_INT.PORT;
  72   2              }
  73   1              else 
  74   1              {       
  75   2                      IP_INT_TYPE = 0;
  76   2                      return 0;
  77   2              }       
  78   1      }
  79          u16 Get_UDP_DATA(u8* buf)
  80          {
  81   1              u16 t;
  82   1              Bytes_Copy(RX_UDP_BUF->UDP_DATA,buf,UDP_INT.RECV_SIZE);
  83   1              t =  UDP_INT.RECV_SIZE;
  84   1              UDP_INT.RECV_SIZE = 0;  
  85   1              return t;
  86   1      }
  87          u16 Get_UDP_DST_Port(void)
  88          {
  89   1              return UDP_INT.DST_PORT;
  90   1      }
  91          u8* Get_UDP_DST_IP(void)
  92          {
  93   1              return UDP_INT.DST_IP;
  94   1      }
  95          u16 Send_UDP(u8 to_ip[4],u16 port_distance,u16 port_local,u8* usr_data,u16 data_size)
  96          {
  97   1              Fill_UDP(to_ip,port_local,port_distance,usr_data,data_size);
  98   1              Send_MAC(to_ip,TCPTYPE_UDP,(u8*)TX_UDP_BUF,data_size+8);
  99   1              return 0;
 100   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1304    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     19      29
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
