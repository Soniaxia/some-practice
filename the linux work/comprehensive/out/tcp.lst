C51 COMPILER V9.00   TCP                                                                   07/14/2015 22:36:42 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TCP
OBJECT MODULE PLACED IN ..\out\tcp.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\net\USIP\tcp.c LARGE BROWSE INCDIR(..\include\drivers;..\include\app;..\
                    -include\gui;..\net\eth;..\net\USIP) DEBUG OBJECTEXTEND PRINT(..\out\tcp.lst) OBJECT(..\out\tcp.obj)

line level    source

   1          #include "tcp.h"
   2          #include "sock.h"
   3          extern IP_BUF *RX_IP_BUF;  
   4          extern IP_BUF *TX_IP_BUF;
   5          
   6          extern u16 MAC_INT_TYPE;
   7          extern u8 Local_IP[4];
   8          TCP_BUF* RX_TCP_BUF;
   9          TCP_BUF* TX_TCP_BUF;
  10          static TCP_VIR_HEAD* VIR_HEAD;
  11          TCP_INT_MSG     TCP_INT;
  12          u32 Word_CONV32(u32 arg)
  13          {
  14   1              /*
  15   1              u32 ret;
  16   1              ((u8*)(&ret))[0] = ((u8*)(&arg))[3];
  17   1              ((u8*)(&ret))[1] = ((u8*)(&arg))[2];
  18   1              ((u8*)(&ret))[2] = ((u8*)(&arg))[1];
  19   1              ((u8*)(&ret))[3] = ((u8*)(&arg))[0];
  20   1              return ret;
  21   1              */
  22   1              return arg;
  23   1      }
  24          void TCP_Init(void)
  25          {
  26   1              RX_TCP_BUF = (TCP_BUF*)RX_IP_BUF->IP_DATA;
  27   1              TX_TCP_BUF = (TCP_BUF*)TX_IP_BUF->IP_DATA;      
  28   1              Socket_Layer_Init();
  29   1      }
  30          void Fill_TCP(u8 to_ip[4],u16 port_local,u16 port_distance,u32 sn,u32 ack_sn,u8 flags,u16 data_size,u8* us
             -r_data)
  31          {
  32   1              u16 tcp_all_double_size;
  33   1              TX_TCP_BUF->HEAD_SIZE = 0x50;
  34   1              TX_TCP_BUF->LOCAL_PORT = Word_CONV(port_local);
  35   1              TX_TCP_BUF->TO_PORT = Word_CONV(port_distance);
  36   1              TX_TCP_BUF->SN = Word_CONV32(sn);
  37   1              TX_TCP_BUF->ACK_SN = Word_CONV32(ack_sn);
  38   1              TX_TCP_BUF->FLAGS = flags;
  39   1              TX_TCP_BUF->WINDOW_SIZE = Word_CONV(1024);
  40   1              TX_TCP_BUF->UGC_PTR = 0;
  41   1              Bytes_Copy(usr_data,(u8*)(TX_TCP_BUF->TCP_DATA),data_size);
  42   1              
  43   1              //填充伪首部
  44   1              
  45   1              tcp_all_double_size = (data_size+(TX_TCP_BUF->HEAD_SIZE>>4)*4+1)/2;
  46   1              TX_TCP_BUF->TCP_DATA[data_size] = 0;
  47   1              VIR_HEAD = (TCP_VIR_HEAD*)((u8*)TX_TCP_BUF+tcp_all_double_size*2);
  48   1              Bytes_Copy(Local_IP,(u8*)(VIR_HEAD->LOCAL_IP),4);
  49   1              Bytes_Copy(to_ip,(u8*)(VIR_HEAD->TO_IP),4);
  50   1              VIR_HEAD->BE_ZERO = 0;
  51   1              VIR_HEAD->TCPTYPE = TCPTYPE_TCP;//TCP此处不和UDP一样
  52   1              VIR_HEAD->ALL_SIZE = Word_CONV(data_size+(TX_TCP_BUF->HEAD_SIZE>>4)*4);
  53   1      
C51 COMPILER V9.00   TCP                                                                   07/14/2015 22:36:42 PAGE 2   

  54   1              //计算并填充检验和
  55   1              Calculate_SUM((u16*)TX_TCP_BUF,tcp_all_double_size+6,8);
  56   1      }
  57          u8 Check_TCP_SUM(void)
  58          {
  59   1              u16 tcp_all_double_size;
  60   1              u16 sum,sum_t = RX_TCP_BUF->TCP_SUM;
  61   1      
  62   1              //填充伪首部
  63   1              
  64   1              tcp_all_double_size = ((Word_CONV(RX_IP_BUF->ALL_SIZE)-20+1)/2);
  65   1              *(u8*)((u8*)RX_IP_BUF+Word_CONV(RX_IP_BUF->ALL_SIZE)) = 0;
  66   1              VIR_HEAD = (TCP_VIR_HEAD*)((u8*)RX_TCP_BUF+tcp_all_double_size*2);
  67   1              Bytes_Copy(RX_IP_BUF->LOCAL_IP,(u8*)(VIR_HEAD->LOCAL_IP),4);
  68   1              Bytes_Copy(RX_IP_BUF->TO_IP,(u8*)(VIR_HEAD->TO_IP),4);
  69   1              VIR_HEAD->BE_ZERO = 0;
  70   1              VIR_HEAD->TCPTYPE = TCPTYPE_TCP;//TCP此处不和UDP一样
  71   1              VIR_HEAD->ALL_SIZE = Word_CONV(Word_CONV(RX_IP_BUF->ALL_SIZE)-20);
  72   1      
  73   1              //计算并填充检验和
  74   1              sum = Calculate_SUM((u16*)RX_TCP_BUF,tcp_all_double_size+6,8);
  75   1              if(sum==sum_t)
  76   1              {
  77   2                      return 1;
  78   2              }
  79   1              else 
  80   1              {
  81   2                      return 0;
  82   2              }               
  83   1      }
  84          
  85          u8 TCP_Process(void)
  86          {
  87   1              IP_INT_TYPE = 0;
  88   1              if(RX_IP_BUF->ALL_SIZE>(MAX_IP_LEN+40))
  89   1              {
  90   2                      return 0;
  91   2              }
  92   1              if(Check_TCP_SUM())
  93   1              {
  94   2                      
  95   2                      TCP_INT.MSG_TYPE = RX_TCP_BUF->FLAGS|0x80;
  96   2                      TCP_INT.RECV_SIZE = Word_CONV(RX_IP_BUF->ALL_SIZE)-20-((RX_TCP_BUF->HEAD_SIZE>>4)*4);
  97   2                      TCP_INT.PORT = Word_CONV(RX_TCP_BUF->TO_PORT);
  98   2                      TCP_INT.SN = Word_CONV32(RX_TCP_BUF->SN);
  99   2                      TCP_INT.ACK_SN = Word_CONV32(RX_TCP_BUF->ACK_SN);
 100   2                      TCP_INT.DST_PORT = Word_CONV(RX_TCP_BUF->LOCAL_PORT);
 101   2                      *((u32*)(&TCP_INT.DST_IP)) = *(u32*)(&RX_IP_BUF->LOCAL_IP);
 102   2                      return 1;               
 103   2              }                       
 104   1              else 
 105   1              return 0;  
 106   1      }
 107          u16 Get_TCP_DST_Port(void)
 108          {
 109   1              return TCP_INT.DST_PORT;
 110   1      }
 111          u8* Get_TCP_DST_IP(void)
 112          {
 113   1              return TCP_INT.DST_IP;
 114   1      }
 115          u16 Get_TCP_Data(u8* buf)
C51 COMPILER V9.00   TCP                                                                   07/14/2015 22:36:42 PAGE 3   

 116          {
 117   1              u16 rcv_size = TCP_INT.RECV_SIZE;
 118   1              Bytes_Copy(RX_TCP_BUF->TCP_DATA,buf,TCP_INT.RECV_SIZE);
 119   1              TCP_INT.RECV_SIZE = 0;
 120   1              return rcv_size;
 121   1      }
 122          void Send_TCP_CTL(SOCKET_T* sock,u8 flags,u8 sn)
 123          {
 124   1              Fill_TCP(sock->DST_IP,sock->LOCAL_PORT,sock->DST_PORT,sock->SN,TCP_INT.SN+sn,flags,0,0);
 125   1              Send_MAC(sock->DST_IP,TCPTYPE_TCP,(u8*)TX_TCP_BUF,20);  
 126   1      }
 127          u32 Get_TCP_INFO(TCP_INT_MSG* buf2)
 128          {
 129   1              u32 t;
 130   1      
 131   1              t =  TCP_INT.RECV_SIZE;
 132   1              t |= TCP_INT.MSG_TYPE<<16;
 133   1              *buf2 =  TCP_INT;
 134   1              TCP_INT.RECV_SIZE = 0;
 135   1              TCP_INT.MSG_TYPE = 0;
 136   1              return t; 
 137   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1773    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     28      44
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
